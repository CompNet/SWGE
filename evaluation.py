import pickle as pkl
import glob
from sklearn import svm
from sklearn.metrics import f1_score
from sklearn.model_selection import train_test_split

"""
  Loads labels from pickle file and returns it.
   
  :param path: path to the pickle file
  :return List of labels
"""
def load_labels(path):
	with open(path, "rb") as f:
		labels = pickle.load(f)
	return labels

"""
  Loads embeddings from pickle files and returns it.
   
  :param path: path to the folder containing all pickle files. These files are usually generated by the SG2V or run_sgcn scripts.
  :return List of embeddings
"""
def load_embeddings(path):
	embeddings = []
	for i in range(len(glob.glob("%s/*.pkl" % (path)))):
		with open("%s/%s.pkl" % (path, i), "rb") as f:
			emb = pickle.load(f)
		embeddings.append(emb)
	return embeddings

"""
  Performs the evaluation.
   
  :param embeddings: list of embeddings
  :param labels: List of labels
  :return None
"""
def evaluation(embeddings, labels):
	X_train, X_test, y_train, y_test = train_test_split(embeddings, labels, test_size=0.3, random_state=7)
	binary_classifier_model = svm.SVC(class_weight="balanced")
	binary_classifier_model.fit(X_train, y_train)

	y_pred = binary_classifier_model.predict(X_test)

	print ("Micro F-measure: %0.4f" % (f1_score(y_test, y_pred, average='micro')))
	print ("Macro F-measure: %0.4f" % (f1_score(y_test, y_pred, average='macro')))



if __name__ == '__main__':
	embeddings = load_embeddings(path_emb)
	labels = load_labels(path_label)
	evaluation(embeddings, labels)